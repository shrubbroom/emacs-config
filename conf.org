#+TITLE: Configuration for Emacs
#+PROPERTY: header-args :results silent :tangle conf.el

* Infrastructure
** Fire up packages!
   #+BEGIN_SRC emacs-lisp
     (package-initialize)
   #+END_SRC
** User defined actions
   User defined actions begin with ~init~.
*** Auto install packages
    #+BEGIN_SRC emacs-lisp
      (defun init/ensure-package (pkg)
        "ensure that package is installed, require it"
        (if (ignore-errors (require pkg))
            t
          (progn
            (unless (package-installed-p pkg)
              (package-refresh-contents)
              (package-install pkg))
            (unless (ignore-errors (require pkg))
              nil
              ;; (warn (format "(init/ensure-package) feature %s doesn't exist" pkg)
              ;;       )
              )
            nil)))
      (defun init/ensure-package-lazy (pkg)
        "ensure package is installed, donot require"
        (unless (package-installed-p pkg)
          (package-refresh-contents)
          (package-install pkg)))
    #+END_SRC
*** Toggle sudo in a buffer
    #+BEGIN_SRC emacs-lisp
      (require 'tramp)
      (defun init/toggle-sudo-in-current-buffer ()
        (interactive)
        (if (buffer-file-name)
            (let ((sudo-buffer (current-buffer)))
              (progn
                (find-file (concat "/sudo:root@localhost:/" (buffer-file-name)))
                (kill-buffer sudo-buffer)))))
    #+END_SRC
*** Find ~init.el~
    #+BEGIN_SRC emacs-lisp
      (defun init/find-init ()
        (interactive) (find-file "~/.config/emacs/init.el"))
    #+END_SRC
    Keybinding
*** Find ~conf.org~
    #+BEGIN_SRC emacs-lisp
      (defun init/find-conf ()
        (interactive) (find-file "~/.config/emacs/conf.org"))
    #+END_SRC
    Keybinding
*** Open file in external applications
    #+BEGIN_SRC emacs-lisp
      (defun init/open-file-in-external-application (&optional args)
        (interactive)
        (ivy-read "App: "
                  '("Thunar" "Code" "Zathura")
                  :action #'open-file-in-external-application-action))
      (defun open-file-in-external-application-action (arg)
        (if (buffer-file-name)
            (pcase arg
              ("Thunar" (async-shell-command (concat "thunar " "\"" default-directory "\"")))
              ("Code" (async-shell-command (concat "code " "\"" (buffer-file-name) "\"")))
              ("Zathura" (async-shell-command (concat "za " "\"" (buffer-file-name) "\""))))
          (message "The buffer is not a file")))
    #+END_SRC
    Keybinding
*** Toggle proxy
    #+BEGIN_SRC emacs-lisp :tangle (if (boundp 'init/local-proxies) "yes" "no")
      (defun init/toggle-url-proxy ()
        "Toggle proxy for the url.el library."
        (interactive)
        (cond
         (url-proxy-services
          (message "Turn off URL proxy")
          (setq url-proxy-services nil))
         (t
          (message "Turn on URL proxy")
          (setq url-proxy-services init/local-proxies))))
    #+END_SRC
** Default behaviors
*** Use 4 spaces instead of tab
    #+BEGIN_SRC emacs-lisp
      (setq-default indent-tabs-mode nil)
    #+END_SRC
*** Save cursor position in file
    #+BEGIN_SRC emacs-lisp
      (save-place-mode)
    #+END_SRC
*** Revert buffer in daemon-client mode
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
      (advice-add #'save-buffers-kill-terminal :before
                  (lambda (&optional args)
                    (interactive) (setq client-revert-bufferp (current-buffer))))
      (defun client-revert-buffer ()
        "revert the buffer if client-revert-bufferp is defined and its buffer still lives"
        (interactive)
        (if (and (boundp 'client-revert-bufferp) (buffer-live-p client-revert-bufferp))
            (switch-to-buffer client-revert-bufferp)))
      (add-hook 'server-after-make-frame-hook 'client-revert-buffer)
    #+END_SRC
*** Set frame title
    #+BEGIN_SRC emacs-lisp
      (setq frame-title-format '(:eval
                                 (buffer-name)))
    #+END_SRC
*** Disable visible warning and cursor
    #+BEGIN_SRC emacs-lisp
      (setq inhibit-splash-screen t)
      (setq visible-bell nil
            visible-cursor nil
            ring-bell-function 'ignore)
    #+END_SRC
*** Disable cursor blink
    #+BEGIN_SRC  emacs-lisp
      (blink-cursor-mode 0)
    #+END_SRC
*** Highlight current line :blocked:
    #+BEGIN_SRC emacs-lisp :tangle no
      (global-hl-line-mode)
    #+END_SRC
*** Use y/n instead of yes/no
    #+BEGIN_SRC emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+END_SRC
*** Disable annoying ~#.$FILENAME#~
    #+BEGIN_SRC emacs-lisp
      (setq make-backup-files nil)
    #+END_SRC
*** Setup initial buffer
    #+BEGIN_SRC emacs-lisp
      (setq-default initial-scratch-message "")
      (add-hook 'emacs-startup-hook (lambda ()
                                       (switch-to-buffer "*scratch*")
                                       (goto-char (point-min))
                                       (insert (concat ";; start up cost: "
                                                       (emacs-init-time)
                                                       "\n\n"))))
    #+END_SRC
*** Define path
    #+BEGIN_SRC emacs-lisp :tangle (if (fboundp 'init/define-path) "yes" "no")
      (init/define-path)
    #+END_SRC
** Undo system
   No extra undo system is required.
*** Set up package
    #+BEGIN_SRC emacs-lisp :tangle no
      (init/ensure-package 'undo-tree)
      (global-undo-tree-mode)
    #+END_SRC
** Navigation & Searching system
*** Basic packages
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package 'ivy)
      ;; (init/ensure-package 'swiper)
      (init/ensure-package-lazy 'ctrlf)
      (init/ensure-package 'counsel)
      (init/ensure-package 'smex)
    #+END_SRC
*** Configure ivy
**** Hook at startup
     #+BEGIN_SRC emacs-lisp
       (add-hook 'after-init-hook 'ivy-mode)
     #+END_SRC
**** Default variables
     #+BEGIN_SRC emacs-lisp
       (setq-default ivy-use-virtual-buffers t
                     ivy-virtual-abbreviate 'fullpath
                     ivy-count-format ""
                     projectile-completion-system 'ivy
                     ivy-magic-tilde nil
                     ivy-dynamic-exhibit-delay-ms 150
                     ivy-use-selectable-prompt t)
     #+END_SRC
**** Issues
     Enable ~escape~ as quit in ivy
     #+BEGIN_SRC emacs-lisp
       (define-key ivy-minibuffer-map [escape] 'minibuffer-keyboard-quit)
     #+END_SRC
*** Configure swiper
    Only keybinding is required
    #+BEGIN_SRC emacs-lisp :tangle no
      (global-set-key "\C-s" 'swiper)
    #+END_SRC
*** Config ctrlf
    #+BEGIN_SRC emacs-lisp
      (ctrlf-mode +1)
    #+END_SRC
*** Configure counsel
**** Hook at startup
     #+BEGIN_SRC emacs-lisp
       (add-hook 'after-init-hook 'counsel-mode)
     #+END_SRC
**** Default variables
     #+BEGIN_SRC emacs-lisp
       (setq-default counsel-mode-override-describe-bindings t
                     ivy-initial-inputs-alist '((Man-completion-table . "^")
                                                (woman . "^")))
     #+END_SRC

**** Keybinding
     #+BEGIN_SRC emacs-lisp
       (global-set-key (kbd "M-x") 'counsel-M-x)
     #+END_SRC

*** Configure smex
    ~smex~ is required for history look-up
    #+BEGIN_SRC emacs-lisp
      (smex-initialize)
    #+END_SRC
** Project manager
   Install ~projectile~
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'projectile)
   #+END_SRC
   Enable ~projectile-mode~ by default
   #+BEGIN_SRC emacs-lisp
     (projectile-mode +1)
     (setq projectile-enable-caching t)
   #+END_SRC
   Keybindings
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c p f") #'projectile-find-file)
     (global-set-key (kbd "C-c p b") #'projectile-switch-to-buffer)
     (global-set-key (kbd "C-c p C-b") #'projectile-ibuffer)
     (global-set-key (kbd "C-c p g") #'projectile-switch-project)
   #+END_SRC
** Helping System
*** Basic packages
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package 'which-key)
      (init/ensure-package 'winum)
      (init/ensure-package 'helpful)
      (init/ensure-package 'hydra)
    #+END_SRC
*** Configurations
    #+BEGIN_SRC emacs-lisp
      (which-key-mode 1)
      (setq winum-auto-setup-mode-line nil)
      (add-hook 'after-init-hook 'winum-mode)
      (setq counsel-describe-function-function #'helpful-callable
            counsel-describe-variable-function #'helpful-variable)
      (global-set-key (kbd "C-h k") #'helpful-key)
      (global-set-key (kbd "C-h d") #'helpful-at-point)
    #+END_SRC
* Look and feel
  *This part should not be changed frequently. Spend time on important things*
** Fonts
   Use Sarasa Term SC as default font
   #+BEGIN_SRC emacs-lisp
     (set-frame-font "Sarasa Term Slab SC-18" nil t)
   #+END_SRC
*** Complex EN-ZH font configuration :blocked:
    This configuration is obsolete.
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun init/set-fonts ()
        (interactive)
        (if (display-graphic-p)
            (progn
              (set-face-attribute 'default nil :font (format "%s:pixelsize=%d" "Lotion" 24))
              (dolist (charset '(kana han symbol cjk-misc bopomofo))
                (set-fontset-font (frame-parameter nil 'font)
                                  charset
                                  (font-spec :family "LXGW WenKai" :size 24))))))
      (defun init/init-fonts (frame)
        (with-selected-frame frame
          (if (display-graphic-p)
              (init/set-fonts))))
      (if (not (daemonp))
          (init/set-fonts)
        (add-hook 'after-make-frame-functions #'init/init-fonts))
    #+END_SRC
** Ligature
*** MasOS
    #+BEGIN_SRC emacs-lisp :tangle (if (eq system-type 'darwin) "yes" "no")
      (mac-auto-operator-composition-mode +1)
    #+END_SRC
*** Other Platform
    #+BEGIN_SRC emacs-lisp :tangle no
      (add-to-list 'load-path
                   (concat user-emacs-directory "site-packages/ligature"))
      (require 'ligature)
      ;; Enable the "www" ligature in every possible major mode
      (ligature-set-ligatures 't '("www"))
      ;; Enable traditional ligature support in eww-mode, if the
      ;; `variable-pitch' face supports it
      (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
      ;; Enable all Cascadia Code ligatures in programming modes
      (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                           ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                           "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                           "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                           "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                           "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                           "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                           "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                           ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                           "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                           "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++"
                                           ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                           "\\\\" "://"))
      (global-ligature-mode t)
    #+END_SRC
** Smooth scrolling
   #+BEGIN_SRC emacs-lisp
     (setq scroll-margin 0)
     (setq scroll-step 1)
     (setq scroll-conservatively 101)
     (setq scroll-up-aggressively 0.01)
     (setq scroll-down-aggressively 0.01)
     (setq auto-window-vscroll nil)
     (setq fast-but-imprecise-scrolling nil)
     (setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
     (setq mouse-wheel-progressive-speed nil)
     ;; Horizontal Scroll
     (setq hscroll-step 1)
     (setq hscroll-margin 0)
   #+END_SRC
*** Images
    #+BEGIN_SRC emacs-lisp :tangle no
      (init/ensure-package 'iscroll)
      (add-hook 'org-mode-hook
                #'(lambda ()
                    (local-set-key (kbd "C-n") 'iscroll-next-line)
                    (local-set-key (kbd "C-p") 'iscroll-previous-line)))
    #+END_SRC
** Theme
*** Issues
    We need to advice the theme changer so that theme can be completely changed in runtime.
    #+BEGIN_SRC emacs-lisp
      (defcustom load-theme-before-hook nil
        "Functions to run before load theme."
        :type 'hook)
      (defcustom load-theme-after-hook nil
        "Functions to run after load theme."
        :type 'hook)
      (defun load-theme-hook-wrapper (origin-func theme &rest args)
        "A wrapper of hooks around `load-theme'."
        (mapc #'disable-theme custom-enabled-themes)
        (run-hook-with-args 'load-theme-before-hook theme)
        (apply origin-func theme args)
        (run-hook-with-args 'load-theme-after-hook theme))
      (advice-add 'load-theme :around #'load-theme-hook-wrapper)
    #+END_SRC
*** Setup theme
    Install themes
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package 'doom-themes)
      (add-to-list 'load-path
                   (concat user-emacs-directory "site-packages/moe-theme"))
      (require 'moe-theme)
    #+END_SRC
    Setup theme.
    #+BEGIN_SRC emacs-lisp :tangle (if (boundp 'init/theme) "yes" "no")
      (load-theme init/theme 1)
    #+END_SRC
*** Small modification to fringe color
    #+BEGIN_SRC emacs-lisp
      (defun init/tone-down-fringes ()
        (set-face-attribute 'fringe nil
                            :foreground (face-foreground 'default)
                            :background (face-background 'default)))
      (init/tone-down-fringes)
    #+END_SRC
** Icon
   Set up all-the-icons
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'all-the-icons)
   #+END_SRC
   I do not manually install the fonts of ~all-the-icons~. System package manager (~pacman~) maintains the font.
** Modeline
*** Install package
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package 'doom-modeline)
    #+END_SRC
*** Set variables
    #+TODO: unicode fallback is broken.
    #+BEGIN_SRC emacs-lisp
      (setq doom-modeline-buffer-file-name-style 'buffer-name
            doom-modeline-project-detection 'projectile
            doom-modeline-modal-icon nil
            doom-modeline-icon t
            doom-modeline-unicode-fallback nil
            doom-modeline-mu4e nil
            doom-modeline-hud t
            all-the-icons-scale-factor 1.0)
      (set-face-attribute 'mode-line nil
                          :height 160)
      (set-face-attribute 'mode-line-inactive nil
                          :height 160)
      (set-face-background 'doom-modeline-bar "#859900" nil)
      (display-time-mode)
      (column-number-mode)
    #+END_SRC
*** Fire up modeline
    #+BEGIN_SRC emacs-lisp
      (add-hook 'after-init-hook 'doom-modeline-mode)
    #+END_SRC
** Tabs
*** Sort-tab
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path
                   (concat user-emacs-directory "site-packages/sort-tab"))
      (require 'sort-tab)
      (sort-tab-mode +1)
      (global-set-key (kbd "<S-left>") 'sort-tab-select-prev-tab)
      (global-set-key (kbd "<S-right>") 'sort-tab-select-next-tab)
      (with-eval-after-load 'org
        (define-key org-mode-map (kbd "<S-left>") 'sort-tab-select-prev-tab)
        (define-key org-mode-map (kbd "<S-right>") 'sort-tab-select-next-tab))
      (add-to-list 'winum-ignored-buffers
                   "*sort-tab*")
    #+END_SRC
    Override hide behavior
    #+BEGIN_SRC emacs-lisp
      (advice-add 'sort-tab-buffer-need-hide-p
                  :around #'(lambda (origin buf)
                              (let ((name (buffer-name buf)))
                                (cond
                                 ((string-equal name "*eshell*")
                                  nil)
                                 ((string-equal name "TAGS")
                                  t)
                                 ((string-prefix-p "*eww" name)
                                  nil)
                                 (t (apply origin `(,buf)))))))

    #+END_SRC
** Line number
   #+BEGIN_SRC emacs-lisp
     (add-hook 'prog-mode-hook 'display-line-numbers-mode)
   #+END_SRC
*** Tone down background, modify font
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'line-number-current-line
                          nil
                          :weight 'bold
                          :height (face-attribute 'default :height)
                          :background (face-background 'line-number)
                          :foreground (face-background 'line-number-current-line))
      (set-face-attribute 'line-number
                          nil
                          :weight 'light
                          :height (face-attribute 'default :height)
                          :background (face-background 'default))
    #+END_SRC
** Side bar
*** Install treemacs
    #+BEGIN_SRC emacs-lisp :tangle no
      (init/ensure-package 'treemacs)
    #+END_SRC
*** Keybindings
    #+BEGIN_SRC emacs-lisp :tangle no
      (global-set-key (kbd "C-t") #'treemacs)
    #+END_SRC
*** Appearance
    #+BEGIN_SRC emacs-lisp :tangle no
      (treemacs-toggle-fixed-width)
      (setq-default treemacs--width-is-locked nil
                    treemacs-width 20)
    #+END_SRC
** Extra features
*** Rich ivy
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package 'ivy-rich)
      (init/ensure-package 'all-the-icons-ivy-rich)
      (ivy-rich-mode 1)
      (all-the-icons-ivy-rich-mode 1)
      (setq ivy-rich-parse-remote-buffer nil)
    #+END_SRC
*** Brackets
**** Look
     #+BEGIN_SRC emacs-lisp
       (init/ensure-package 'rainbow-delimiters)
       (init/ensure-package 'highlight-parentheses)
     #+END_SRC
**** Smart parens
     #+BEGIN_SRC emacs-lisp
       (init/ensure-package 'smartparens)
       (add-hook 'after-init-hook 'smartparens-global-mode)
       (sp-pair "(" nil :unless '(sp-point-before-word-p))
       (sp-pair "[" nil :unless '(sp-point-before-word-p))
       (sp-pair "{" nil :unless '(sp-point-before-word-p))
       (sp-pair "\"" nil :unless '(sp-point-before-word-p))
       (sp-pair "\'" nil :unless '(sp-point-before-word-p))
       (sp-pair "`" nil :actions :rem)
     #+END_SRC
*** Display HEX/RGB color
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package 'rainbow-mode)
    #+END_SRC
* Languages
** Complete system
   First of all, install ~company~.
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'company)
   #+END_SRC
   Then setup hooks, company is enabled globally.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'after-init-hook 'global-company-mode)
   #+END_SRC
*** Keybindings
    Use ~M-n,p~ instead of ~C-n,p~.
    #+BEGIN_SRC emacs-lisp
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") #'company-select-next)
      (define-key company-active-map (kbd "C-p") #'company-select-previous)
    #+END_SRC
*** Default behaviors
    #+BEGIN_SRC emacs-lisp
      (setq company-idle-delay 0
            company-minimum-prefix-length 1
            company-show-numbers t)
      (push 'company-files company-backends)
    #+END_SRC
*** Frontend
    I use ~company-posframe~ as company frontend.
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package 'company-posframe)
      (company-posframe-mode 1)
      ;; (setq posframe-mouse-banish nil)

    #+END_SRC
*** Snippet
    Install ~yasnippet~.
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package 'yasnippet)
    #+END_SRC
    Then add hook, we only need snippet in ~lsp-mode~.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'lsp-mode-hook 'yas-minor-mode)
    #+END_SRC
*** LSP
    Install ~lsp-mode~.
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package-lazy 'lsp-mode)
    #+END_SRC
    Enable ~which-key~ help in ~lsp mode~.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'lsp-mode-hook 'lsp-enable-which-key-integration)
    #+END_SRC
    We need to set ~idle-delay~ to tell LSP when it can update.
    #+BEGIN_SRC emacs-lisp
      (setq lsp-idle-delay 1)
    #+END_SRC
    Make the headline look uniform.
    #+BEGIN_SRC emacs-lisp :tangle no
      (set-face-attribute 'header-line nil
                          :background (face-background 'default))
    #+END_SRC
    Disable some annoying feature
    #+BEGIN_SRC emacs-lisp
      (setq lsp-diagnostic-package :none)
      (setq lsp-headerline-breadcrumb-enable nil)
      (setq lsp-lens-enable nil)
    #+END_SRC
*** Issues
**** Ignore cases of ~company-dabbrev~
     #+BEGIN_SRC emacs-lisp
       (setq company-dabbrev-ignore-buffers
             (rx (or (seq bos (any " *"))
                     (seq ".pdf" eos))))
     #+END_SRC
** Display
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook #'show-paren-mode)
#+END_SRC
** Verilog
   Require built-in ~verilog-mode~.
   #+BEGIN_SRC emacs-lisp :tangle no
     (require 'verilog-mode)
   #+END_SRC
   Build completion system with ~ctags~ and ~company-keywords~.
   #+BEGIN_SRC emacs-lisp :tangle no
     (init/ensure-package 'citre)
     (setq verilog-imenu-generic-expression
           '(("*Outputs*" "^\\s-*\\(output\\)\\s-+\\(reg\\|wire\\|logic\\|\\)\\s-+\\(\\|\\[[^]]+\\]\\s-+\\)\\([A-Za-z0-9_]+\\)" 4)
             ("*Inputs*" "^\\s-*\\(input\\)\\s-+\\(reg\\|wire\\|logic\\|\\)\\s-+\\(\\|\\[[^]]+\\]\\s-+\\)\\([A-Za-z0-9_]+\\)" 4)
             (nil "^\\s-*\\(?:m\\(?:odule\\|acromodule\\)\\|p\\(?:rimitive\\|rogram\\|ackage\\)\\)\\s-+\\([a-zA-Z0-9_.:]+\\)" 1)
             ("*Wires*" "^\\s-*\\(wire\\)\\s-+\\(\\|\\[[^]]+\\]\\s-+\\)\\([A-Za-z0-9_]+\\)" 3)
             ("*Regs*" "^\\s-*\\(reg\\)\\s-+\\(\\|\\[[^]]+\\]\\s-+\\)\\([A-Za-z0-9_]+\\)" 3)
             ("*Parameters*" "^\\s-*\\(parameter\\)\\s-+\\([A-Za-z0-9_]+\\)" 2)
             ("*Instances*" "^\\s-*\\(?1:[A-Za-z0-9_]+\\)\\s-+\\1" 1)
             ("*Classes*" "^\\s-*\\(?:\\(?:virtual\\|interface\\)\\s-+\\)?class\\s-+\\([A-Za-z_][A-Za-z0-9_]+\\)" 1)
             ("*Tasks*" "^\\s-*\\(?:\\(?:static\\|pure\\|virtual\\|local\\|protected\\)\\s-+\\)*task\\s-+\\(?:\\(?:static\\|automatic\\)\\s-+\\)?\\([A-Za-z_][A-Za-z0-9_:]+\\)" 1)
             ("*Functions*" "^\\s-*\\(?:\\(?:static\\|pure\\|virtual\\|local\\|protected\\)\\s-+\\)*function\\s-+\\(?:\\(?:static\\|automatic\\)\\s-+\\)?\\(?:\\w+\\s-+\\)?\\(?:\\(?:un\\)signed\\s-+\\)?\\([A-Za-z_][A-Za-z0-9_:]+\\)" 1)
             ("*Interfaces*" "^\\s-*interface\\s-+\\([a-zA-Z_0-9]+\\)" 1)
             ("*Types*" "^\\s-*typedef\\s-+.*\\s-+\\([a-zA-Z_0-9]+\\)\\s-*;" 1)))
     (require 'company-keywords)
     (add-to-list 'company-keywords-alist (cons 'verilog-mode verilog-keywords))
     (defun company-citre (-command &optional -arg &rest _ignored)
       "Completion backend of Citre.  Execute COMMAND with ARG and IGNORED."
       (interactive (list 'interactive))
       (cl-case -command
         (interactive (company-begin-backend 'company-citre))
         (prefix (and (bound-and-true-p citre-mode)
                      (or (citre-get-symbol) 'stop)))
         (meta (citre-get-property 'signature -arg))
         (annotation (citre-capf--get-annotation -arg))
         (candidates (all-completions -arg (citre-capf--get-collection -arg)))
         (ignore-case (not citre-completion-case-sensitive))))

     (defun init/regenerate-tags ()
       (interactive)
       (if (and (boundp 'projectile-project-root)
                (projectile-project-root))
           (citre-update-this-tags-file t)
         ))
     (add-hook 'verilog-mode-hook (lambda ()
                                    (citre-auto-enable-citre-mode)
                                    (make-local-variable 'company-backends)
                                    (setq company-backends '((company-keywords
                                                              company-citre
                                                              )))
                                    (company-mode)
                                    ;; (make-local-variable 'after-save-hook)
                                    ;; (add-hook 'after-save-hook 'citre-update-this-tags-file)
                                    ))
     (add-to-list 'company-transformers #'delete-dups)
   #+END_SRC
** Python
   #+BEGIN_SRC emacs-lisp :tangle no
     (init/ensure-package 'pyvenv)
   #+END_SRC
   This function is defined to manually select virtual environment.
   #+BEGIN_SRC emacs-lisp :tangle no
     (if (boundp 'init/python-env-list)
         (defun init/python-switch-env (&optional args)
           (interactive)
           (ivy-read "Env: "
                     init/python-env-list
                     :action #'(lambda (arg)
                                 (pyvenv-deactivate)
                                 (pyvenv-activate arg)))))
   #+END_SRC
   ~yapf~ and ~pyright~ are used to format and complete.
   #+BEGIN_SRC emacs-lisp :tangle no
     (init/ensure-package 'lsp-pyright)
     (defun lsp-pyright-format-buffer ()
       (interactive)
       (when (and (executable-find "yapf") buffer-file-name)
         (call-process "yapf" nil nil nil "-i" buffer-file-name "--style={COLUMN_LIMIT=256}")
         (revert-buffer t t)))
     (add-hook 'python-mode-hook
               #'(lambda ()
                   (lsp)
                   (add-hook 'after-save-hook #'lsp-pyright-format-buffer t t)))
     (when (executable-find "python3")
       (setq lsp-pyright-python-executable-cmd "python3"))
   #+END_SRC
** C/C++
   Installing ~ccls~.
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package-lazy 'ccls)
     (dolist (hook '(c-mode-hook c++-mode-hook))
       (add-hook hook #'lsp))
     (setq ccls-sem-highlight-method nil)
   #+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
  (init/ensure-package 'rust-mode)
  (setq lsp-rust-server 'rust-analyzer)
  (setq lsp-rust-analyzer-cargo-watch-enable nil)
  (cl-defmethod lsp-clients-extract-signature-on-hover (contents (_server-id (eql rust-analyzer)))
    (-let* (((&hash "value") contents)
            (groups (--partition-by (s-blank? it) (s-lines (s-trim value))))
            (sig_group (if (s-equals? "```rust" (car (-third-item groups)))
                           (-third-item groups)
                         (car groups)))
            (sig (--> sig_group
                      (--drop-while (s-equals? "```rust" it) it)
                      (--take-while (not (s-equals? "```" it)) it)
                      (s-join "" it))))
      (lsp--render-element (concat "```rust\n" sig "\n```"))))

  (add-hook 'rust-mode-hook #'(lambda ()
                                (setq-local compile-command "cargo build")
                                (lsp)))
#+END_SRC
** Emacs-Lisp
   Use ~paredit~ in ~elisp-mode~
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'paredit)
     (setq backward-delete-char-untabify-method 'all)
     (add-hook 'scheme-mode-hook 'paredit-mode)
     (add-hook 'scheme-mode-hook 'rainbow-delimiters-mode)
     (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
     (add-hook 'emacs-lisp-mode 'rainbow-delimiters-mode)
   #+END_SRC
** Shell
   Install ~fish-mode~ and config keybindings
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'fish-mode)
   #+END_SRC
** Matlab
   Install ~matlab-mode~
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'matlab-mode)
   #+END_SRC
** YAML
   Install ~yaml-mode~
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'yaml-mode)
   #+END_SRC
* Documentation
** IM module
   Use ~smart-input-method~ as auto IM switcher.
   #+BEGIN_SRC emacs-lisp :tangle no
     (init/ensure-package 'sis)
     (sis-ism-lazyman-config
      "1"
      "2"
      'fcitx5)
     (sis-global-cursor-color-mode t)
     (sis-global-respect-mode t)
     (sis-global-context-mode t)
     (sis-global-inline-mode t)
     (setq sis-inline-tighten-head-rule 0
           sis-inline-tighten-tail-rule 1
           sis-english-pattern "[a-zA-Zλ]"
           sis-default-cursor-color "dark orange"
           sis-other-cursor-color "medium blue"
           )
   #+END_SRC
*** Emacs Rime
    #+BEGIN_SRC emacs-lisp :tangle no
      (defun init/toggle-rime (&optional args)
        (interactive)
        (init/ensure-package 'rime)
        (setq default-input-method "rime")
        (define-key evil-insert-state-map (kbd "C-SPC") nil)
        (define-key evil-emacs-state-map (kbd "C-SPC") nil)
        (evil-define-key '(insert emacs) 'global
                         (kbd "C-SPC") 'init/toggle-rime)
        (define-key rime-mode-map (kbd "C-z") 'rime-force-enable)
        (setq rime-show-candidate 'posframe)
        (setq rime-user-data-dir "~/.config/emacs/rime/")
        (setq rime-translate-keybindings
              '("C-f" "C-b" "C-n" "C-p" "C-g" "C-`"))
        (setq rime-show-preedit 'inline)
        (setq rime-disable-predicates
              '(
                rime-predicate-prog-in-code-p
                rime-predicate-current-uppercase-letter-p
                rime-predicate-after-alphabet-char-p
                rime-predicate-after-ascii-char-p
                rime-predicate-evil-mode-p
                rime-predicate-hydra-p rime-predicate-punctuation-line-begin-p
                rime-predicate-space-after-cc-p
                rime-predicate-tex-math-or-command-p))
        (setq init/toggle-rime 'toggle-input-method)
        )
      (define-key evil-insert-state-map (kbd "C-SPC") nil)
      (define-key evil-emacs-state-map (kbd "C-SPC") nil)
      (evil-define-key '(insert emacs) 'global
                       (kbd "C-SPC") 'init/toggle-rime)
    #+END_SRC
** Display
   Enable ~visual-line-mode~ in ~text-mode~ and Latex buffer.
   #+BEGIN_SRC emacs-lisp
     (add-hook 'text-mode-hook 'visual-line-mode)
     (dolist (hook '(TeX-mode-hook LaTeX-mode-hook bibtex-mode-hook))
       (add-hook hook visual-line-mode))
   #+END_SRC
** Org mode
*** Set seperate font for org mode
    #+BEGIN_SRC emacs-lisp
      (defface org-font
        '((t :family "霞鹜文楷"))
        "霞鹜文楷"
        :group 'basic-faces)
      (add-hook 'org-mode-hook
                #'(lambda ()
                    (if (display-graphic-p)
                        (progn
                          ;; (text-scale-set 1)
                          (set (make-local-variable 'buffer-face-mode-face) 'org-font)
                          (buffer-face-mode t)
                          (face-remap-add-relative 'org-block '(:family "Sarasa Term SC"))))))
      (defun buffer-toggle-highlight-foreground (&optional args)
        (interactive)
        (if (and (boundp 'face-remap-add-relative-cookie) face-remap-add-relative-cookie)
            (progn (face-remap-remove-relative face-remap-add-relative-cookie)
                   (setq face-remap-add-relative-cookie nil))
          (set (make-local-variable 'face-remap-add-relative-cookie) (face-remap-add-relative 'default '(:foreground "#000000")))))
    #+END_SRC
*** Table Align
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package-lazy 'valign)
      (add-hook 'org-mode-hook #'valign-mode)
    #+END_SRC
*** Org Download
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package-lazy 'org-download)
      (add-hook 'org-mode-hook 'org-download-enable)
    #+END_SRC
*** Org Superstar
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package-lazy 'org-superstar)
      (add-hook 'org-mode-hook 'org-superstar-mode)
    #+END_SRC
*** Quick jump to specific headline via ivy and fuzzy search
    It will be helpful to jump quickly when editing ~conf.org~. Also see [[https://github.com/abo-abo/swiper/issues/986][discussion]].
    #+BEGIN_SRC emacs-lisp
      (setq org-goto-interface 'outline-path-completion)
      (setq org-outline-path-complete-in-steps nil)
    #+END_SRC
    I use ~"C-j"~ to invoke jump.
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'org
        (define-key org-mode-map (kbd "C-j") 'org-goto))
    #+END_SRC
*** Preview
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'org
        (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.4)
              org-preview-latex-default-process 'dvisvgm))
    #+END_SRC
*** Highlight Latex fragment
    #+BEGIN_SRC emacs-lisp :tangle no
      (setq org-highlight-latex-and-related '(latex script entities))
      (with-eval-after-load 'org
        (require 'latex)
        (add-hook 'org-mode-hook 'latex-math-mode))
    #+END_SRC
*** Integrate zotxt
    #+BEGIN_SRC emacs-lisp :tangle no
      (init/ensure-package-lazy 'zotxt)
      (add-hook 'org-mode-hook 'org-zotxt-mode)
    #+END_SRC
*** Disable company
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook (lambda ()
                                 (setq-local company-backends '((company-capf)))))
    #+END_SRC
*** Word Wrap
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook #'(lambda () (setq-local word-wrap-by-category t)))
    #+END_SRC
*** Local Functions
#+BEGIN_SRC emacs-lisp
  (defun org-copy-src-block-link()
    (interactive)
    (save-excursion
      (forward-line -1)
      (org-edit-src-code)
      (clipboard-kill-ring-save (point-min) (point-max))
      (org-edit-src-exit)))
#+END_SRC
*** Beautify
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'org
        ;; Make verbatim with highlight text background.
        (add-to-list 'org-emphasis-alist
                     '("=" (:background "#fef7ca")))
        ;; Make deletion(obsolote) text foreground with dark gray.
        (add-to-list 'org-emphasis-alist
                     '("+" (:foreground "dark gray"
                                        :strike-through t)))
        ;; Make code style around with box.
        (add-to-list 'org-emphasis-alist
                     '("~" (:box (:line-width 1
                                              :color "grey75"
                                              :style released-button))))
        (setq org-hide-emphasis-markers t
              org-pretty-entities t)
        )

      (with-eval-after-load 'whitespace
        (dolist (face '(whitespace-space whitespace-tab whitespace-newline))
          (set-face-attribute face nil
                              :background (face-background 'default)
                              :foreground "grey75")))
      (setq whitespace-style '(face spaces tabs newline space-mark tab-mark newline-mark))
    #+END_SRC
** Latex
   #+BEGIN_SRC emacs-lisp
     (setq org-latex-pdf-process
           '("xelatex -interaction --synctex=1 nonstopmode -output-directory %o %f"
             "xelatex -interaction --synctex=1 nonstopmode -output-directory %o %f"
             "xelatex -interaction --synctex=1 nonstopmode -output-directory %o %f"))
     (org-babel-do-load-languages
      'org-babel-load-languages
      '((dot . t)))
     (init/ensure-package 'auctex)
     (setq TeX-auto-save t
           TeX-parse-self t
           TeX-source-correlate-mode t
           TeX-source-correlate-start-server t
           TeX-source-correlate-method '((dvi . source-specials)
                                         (pdf . synctex))
           ;; TeX-view-program-selection (quote
           ;;                             ((output-pdf "Zathura")
           ;;                              (output-dvi "Zathura")
           ;;                              (output-html "xdg-open")))
           )
     (setq-default TeX-master nil)
     (init/ensure-package 'lsp-latex)
     (dolist
         (hook '(TeX-mode-hook LaTeX-mode-hook bibtex-mode-hook))
       (add-hook hook #'(lambda ()
                          (add-to-list
                           'TeX-command-list
                           '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
                          (visual-line-mode)
                          (setq-local lsp-diagnostics-provider :none)
                          (setq-local lsp-eldoc-enable-hover nil)
                          (setq-local lsp-modeline-diagnostics-enable nil)
                          (lsp))))
   #+END_SRC
* Extra features
** Set up clipboard in terminal
   #+BEGIN_SRC emacs-lisp :tangle no
     (init/ensure-package 'xclip)
     (xclip-mode 1)
   #+END_SRC
** Set up magit
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package-lazy 'magit)
   #+END_SRC
** Eshell
*** Prompt
    #+BEGIN_SRC emacs-lisp
      (setq eshell-prompt-function-light #'(lambda nil
                                             (concat
                                              (propertize "╭─"
                                                    
                                                          'face `(:background (face-background 'default) :weight bold))
                                              (propertize (user-login-name) 
                                                          'face `(:foreground (face-foreground 'default) :weight bold))
                                              (propertize " at " 
                                                          'face `(:background (face-background 'default)))
                                              (propertize (system-name) 
                                                          'face `(:foreground (face-foreground 'default) :weight bold))
                                              (propertize " in " 
                                                          'face `(:background (face-background 'default)))
                                              (propertize (abbreviate-file-name (eshell/pwd)) 
                                                          'face `(:foreground (face-foreground 'default)
                                                                              :weight bold :slant italic))
                                              (if (and (boundp 'url-proxy-services)
                                                       (assoc "http" url-proxy-services))
                                                  (concat
                                                   (propertize " via " 
                                                               'face `(:background (face-background 'default)))
                                                   (propertize (cdr (assoc "http" url-proxy-services)) 
                                                               'face `(:foreground (face-foreground 'default)
                                                                                   :weight bold))))
                                              (propertize "\n" 
                                                          'face `(:background (face-background 'default)))
                                              (propertize "╰─["
                                                          'face `(:background (face-background 'default) :weight bold))
                                              (propertize (if (= (user-uid) 0) "# " "λ") 
                                                          'face `(:slant italic :weight bold))
                                              (propertize "]"
                                                    
                                                          'face `(:background (face-background 'default) :weight bold))
                                              (propertize " " 
                                                          'face `(:background (face-background 'default))))))

      (setq eshell-prompt-function-dark #'(lambda nil
                                            (concat
                                             (propertize "╭─"
                                                         'face `(:background (face-background 'default) :weight bold))
                                             (propertize (user-login-name)
                                                         'face `(:foreground "#268bd2" :weight bold))
                                             (propertize " at "
                                                         'face `(:background (face-background 'default)))
                                             (propertize (system-name)
                                                         'face `(:foreground  "#268bd2" :weight bold))
                                             (propertize " in "
                                                         'face `(:background (face-background 'default)))
                                             (propertize (abbreviate-file-name (eshell/pwd))
                                                         'face `(:foreground "#859900" :weight bold :slant italic))
                                             (if (and (boundp 'url-proxy-services)
                                                      (assoc "http" url-proxy-services))
                                                 (concat
                                                  (propertize " via "
                                                              'face `(:background (face-background 'default)))
                                                  (propertize (cdr (assoc "http" url-proxy-services))
                                                              'face `(:foreground "#2aa198" :weight bold))))
                                             (propertize "\n"
                                                         'face `(:background (face-background 'default)))
                                             (propertize "╰─["
                                                         'face `(:background (face-background 'default) :weight bold))
                                             (propertize (if (= (user-uid) 0) "# " "λ")
                                                         'face `(:slant default :weight bold :foreground "#7959AE"))
                                             (propertize "]"
                                                         'face `(:background (face-background 'default) :weight bold))
                                             (propertize " "
                                                         'face `(:background (face-background 'default))))))

      (setq eshell-prompt-regexp "^╰─\\\[[#λ]\\\] "
            eshell-prompt-function eshell-prompt-function-dark)
    #+END_SRC
*** Syntax highlight
#+BEGIN_SRC emacs-lisp
  (init/ensure-package-lazy 'eshell-syntax-highlighting)
  (with-eval-after-load 'eshell
    (require 'eshell-syntax-highlighting)
    (set-face-attribute 'eshell-syntax-highlighting-alias-face
                        nil :foreground "#2E67D3" :weight 'bold)
    (set-face-attribute 'eshell-syntax-highlighting-shell-command-face
                        nil :foreground "#2E67D3" :weight 'bold)
    (add-hook 'eshell-mode-hook 'eshell-syntax-highlighting-mode))
#+END_SRC
*** FZF fuzzy search
    #+BEGIN_SRC emacs-lisp
      (setq eshell-history-size 1024)
      (defun init/ivy-eshell-history ()
        (interactive)
        (require 'em-hist)
        (let* ((start-pos (save-excursion (eshell-bol) (point)))
               (end-pos (point))
               (input (buffer-substring-no-properties start-pos end-pos))
               (command (ivy-read "Command: "
                                  (delete-dups
                                   (when (> (ring-size eshell-history-ring) 0)
                                     (ring-elements eshell-history-ring)))
                                  :initial-input input)))
          (setf (buffer-substring start-pos end-pos) command)
          (end-of-line)))
    #+END_SRC
*** z-jump
    #+BEGIN_SRC emacs-lisp
      (init/ensure-package-lazy 'eshell-z)
      (with-eval-after-load 'eshell
        (require 'eshell-z))
      ;; (add-hook 'eshell-mode-hook
      ;;           #'(lambda ()
      ;;               (require 'eshell-z)))
    #+END_SRC
*** Colorful ~cat~
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'em-unix
        (defun eshell/cat (&rest args)
          "Like cat(1) but with syntax highlighting."
          (unless args (error "Usage: cat FILE ..."))
          (dolist (filename (eshell-flatten-list args))
            (let ((existing-buffer (get-file-buffer filename))
                  (buffer (find-file-noselect filename)))
              (eshell-print
               (with-current-buffer buffer
                 (if (fboundp 'font-lock-ensure)
                     (font-lock-ensure)
                   (with-no-warnings
                     (font-lock-fontify-buffer)))
                 (buffer-string)))
              (unless existing-buffer
                (kill-buffer buffer))
              nil))))
    #+END_SRC
*** image cat
    #+BEGIN_SRC emacs-lisp
      (defun eshell/imgcat (&rest args)
        "Display image files."
        (unless args (error "Usage: imgcat FILE ..."))
        (dolist (img (eshell-flatten-list args))
          (eshell/printnl
           (propertize " " 'display (create-image img)))))
    #+END_SRC
*** Keybindings
    #+BEGIN_SRC emacs-lisp
      (add-hook 'eshell-mode-hook
                #'(lambda ()
                    (local-set-key (kbd "C-r") #'init/ivy-eshell-history)))
    #+END_SRC
*** Alias
#+BEGIN_SRC emacs-lisp
  (defun eshell/emacs (file)
    (find-file file))
#+END_SRC
*** Issues
    #+BEGIN_SRC emacs-lisp
      (with-eval-after-load 'em-term
        (push "python" eshell-visual-commands)
        (push "ghci" eshell-visual-commands)
        (push "ssh" eshell-visual-commands)
        (add-hook 'eshell-mode-hook (lambda ()
                                      (company-mode -1))))
    #+END_SRC

** Symbol overlay
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'symbol-overlay)
     (global-set-key (kbd "M-i") 'symbol-overlay-put)
     (global-set-key (kbd "M-n") 'symbol-overlay-switch-forward)
     (global-set-key (kbd "M-p") 'symbol-overlay-switch-backward)
     (global-set-key (kbd "M-k") 'symbol-overlay-remove-all)
     (add-hook 'prog-mode-hook 'symbol-overlay-mode)
   #+END_SRC

** mu4e
   Set font
   #+BEGIN_SRC emacs-lisp :tangle no
     (defface mu4e-font
       '((t :family "Times New Roman"))
       "Times New Roman"
       :group 'basic-faces)
     (dolist (hook '(mu4e-view-mode-hook mu4e-compose-mode-hook mu4e-headers-mode-hook mu4e-main-mode-hook))
       (add-hook hook
                 #'(lambda ()
                     (if (display-graphic-p)
                         (progn
                           (set (make-local-variable 'buffer-face-mode-face) 'mu4e-font)
                           (buffer-face-mode t))))))
   #+END_SRC

   #+BEGIN_SRC emacs-lisp :tangle no
     (defun mu4e (&optional args)
       (interactive)
       (add-to-list 'load-path
                    (concat user-emacs-directory "site-packages/mu/mu4e"))
       (init/ensure-package 'mu4e)
       (setq epa-pinentry-mode 'loopback
             mail-user-agent 'mu4e-user-agent
             mu4e-maildir "~/.mail"
             mu4e-view-show-images t
             mu4e-get-mail-command "offlineimap -u quiet"
             mu4e-index-update-error-warning nil
             mu4e-update-interval 300
             mu4e-index-update-error-warning t
             send-mail-function 'smtpmail-send-it
             message-send-mail-function 'smtpmail-send-it
             send-mail-function 'smtpmail-send-it
             message-send-mail-function 'smtpmail-send-it
             smtpmail-auth-credentials "~/.authinfo.gpg"
             smtpmail-stream-type 'ssl
             mu4e-context-policy 'pick-first)
       (add-to-list 'mu4e-view-actions
                    '("View in browser" . mu4e-action-view-in-browser) t)
       (defun offlineimap-get-password (host port)
         (require 'netrc)
         (let* ((netrc (netrc-parse (expand-file-name "~/.authinfo.gpg")))
                (hostentry (netrc-machine netrc host port port)))
           (when hostentry (netrc-get hostentry "password"))))
       (mu4e)
       )
   #+END_SRC

** ssh-deploy
   #+BEGIN_SRC emacs-lisp :tangle no
     (init/ensure-package 'ssh-deploy)
     (ssh-deploy-line-mode)
     (ssh-deploy-add-after-save-hook) ;; If you want automatic upload support
     (ssh-deploy-add-find-file-hook) ;; If you want detecting remote changes support
     (global-set-key (kbd "C-c C-z") 'ssh-deploy-prefix-map)
   #+END_SRC
** pdf-tools
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'pdf-tools)
     (pdf-loader-install)
     (add-hook 'doc-view-minor-mode-hook #'(lambda ()
                                             (company-mode -1)))
   #+END_SRC
** lua-mode
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'lua-mode)
   #+END_SRC
** scala-mode
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package 'scala-mode)
   #+END_SRC
** ivy-posframe
   #+BEGIN_SRC emacs-lisp :tangle no
     (init/ensure-package 'ivy-posframe)
     (ivy-posframe-mode)
     (defun my-ivy-posframe-get-size ()
       "Set the ivy-posframe size according to the current frame."
       (let ((height (or ivy-posframe-height (or ivy-height 10)))
             (width (min (or ivy-posframe-width 200) (round (* .85 (frame-width))))))
         (list :height height :width width :min-height height :min-width width)))

     (setq ivy-posframe-size-function 'my-ivy-posframe-get-size)

   #+END_SRC
** ebib
   #+BEGIN_SRC emacs-lisp :tangle (if (and (boundp 'init/ebib-file-search-dirs) (boundp 'init/ebib-preload-bib-files)) "yes" "no")
     (init/ensure-package-lazy 'ebib)
     (setq ebib-file-search-dirs init/ebib-file-search-dirs)
     (setq ebib-preload-bib-files init/ebib-preload-bib-files)
     (setq ebib-index-columns '(("Entry Key" 20 t)
                                ("Title" 60 t)
                                ("Author/Editor" 40 t)
                                ("Year" 6 t)))
     (setq ebib-index-column-separator "  ")
     (with-eval-after-load 'ebib
       (setq ebib-file-associations nil)
       ;; (add-to-list 'ebib-file-associations '("pdf" . "open"))
       (global-set-key (kbd "C-c e i") 'ebib-insert-citation))
   #+END_SRC
** Org Roam
#+BEGIN_SRC emacs-lisp :tangle (if (boundp 'init/org-roam-directory) "yes" "no")
  (init/ensure-package-lazy 'org-roam)
  (setq org-roam-directory init/org-roam-directory)
  (defun org-roam-node-find (&optional args)
    "Lazy load wrapper for org-roam"
    (interactive)
    (require 'org-roam)
    (org-roam-setup)
    (org-roam-node-find))
  (defun org-roam-node-insert (&optional args)
    "Lazy load wrapper for org-roam"
    (interactive)
    (require 'org-roam)
    (org-roam-setup)
    (org-roam-node-insert))
  (defun org-roam-node-list (&optional args)
    "Lazy load wrapper for org-roam"
    (interactive)
    (require 'org-roam)
    (org-roam-setup)
    (org-roam-node-list))
  (global-set-key (kbd "C-c n f") #'org-roam-node-find)
  (global-set-key (kbd "C-c n i") #'org-roam-node-insert)
  (global-set-key (kbd "C-c n l") #'org-roam-buffer-list)
#+END_SRC
*** Advice sort-tab
#+BEGIN_SRC emacs-lisp
  (advice-add 'sort-tab-get-tab-name
              :around #'(lambda (origin buf current-buffer)
                          (let* ((name (buffer-name buf))
                                 (short-name (replace-regexp-in-string "20[0-9][0-9][01][0-9][0-3][0-9]+-"
                                                                       "" name)))
                            (if (eq (length name) (length short-name))
                                (apply origin `(,buf ,current-buffer))
                              (let ((short-name-formatted (concat "roam:"
                                                                  (string-remove-suffix ".org" short-name))))
                               (propertize
                                (format " %s "
                                        (let ((ellipsis "..."))
                                          (if (> (length short-name-formatted) sort-tab-name-max-length)
                                              (format "%s%s"
                                                      (substring short-name-formatted
                                                                 0
                                                                 (- sort-tab-name-max-length (length ellipsis)))
                                                      ellipsis)
                                            short-name-formatted)))
                                'face
                                (if (eq buf current-buffer)
                                    'sort-tab-current-tab-face
                                  'sort-tab-other-tab-face)))))))
#+END_SRC
** Org Drill
#+BEGIN_SRC emacs-lisp
  (init/ensure-package-lazy 'org-drill)
  (defun org-find-drill-file ()
    (interactive)
    (find-file init/org-drill-file))
#+END_SRC
** English Helper
   #+BEGIN_SRC emacs-lisp
     (add-to-list 'load-path
                  (concat user-emacs-directory "site-packages/company-english-helper"))
     (defun toggle-company-english-helper (&optional args)
       "Lazy load wrapper for english helper"
       (interactive)
       (require 'company-english-helper)
       (toggle-company-english-helper))
   #+END_SRC
** Ripgrep
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package-lazy 'rg)
     (defun rg (&optional args)
       "Lazy load wrapper for rg"
       (interactive)
       (require 'rg)
       (rg))
   #+END_SRC
** IBuffer
   #+BEGIN_SRC emacs-lisp
     (init/ensure-package-lazy 'all-the-icons-ibuffer)
     (init/ensure-package-lazy 'ibuffer-projectile)
     (global-set-key (kbd "C-x C-b") #'ibuffer)
     (add-hook 'ibuffer-hook
               (lambda ()
                 (all-the-icons-ibuffer-mode)
                 (ibuffer-projectile-set-filter-groups)
                 (unless (eq ibuffer-sorting-mode 'alphabetic)
                   (ibuffer-do-sort-by-alphabetic))))
     (with-eval-after-load 'ibuffer
       (require 'all-the-icons-ibuffer)
       (require 'ibuffer-projectile))
   #+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
  (init/ensure-package-lazy 'all-the-icons-dired)
  (with-eval-after-load 'dired
    (require 'dired-x)
    (require 'all-the-icons-dired))
  (when (string= system-type "darwin")
    (setq dired-use-ls-dired nil))
  (setq dired-omit-files "^\\\.")
  (add-hook 'dired-mode-hook #'all-the-icons-dired-mode)
  (add-hook 'dired-mode-hook #'dired-omit-mode)
  (define-key dired-mode-map (kbd "C-c t") #'dired-omit-mode)
#+END_SRC
